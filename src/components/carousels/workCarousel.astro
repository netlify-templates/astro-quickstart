---
import Carousel from '../carousel.astro'
import LargeImage from '../largeImage.astro'

const { carouselIndex } = Astro.props

var images = []

var members = [
    {
        username: 'maya', 
        imgs: await Astro.glob('../../../members/maya/portfolio/*'), 
        fullRes: [], 
    }, 
    {
        username: 'isabelle', 
        imgs: await Astro.glob('../../../members/isabelle/portfolio/*'), 
        fullRes: [], 
    }, 
    {
        username: 'juhi', 
        imgs: await Astro.glob('../../../members/juhi/portfolio/*'), 
        fullRes: [], 
    }, 
    {
        username: 'shikha', 
        imgs: await Astro.glob('../../../members/shikha/portfolio/*'), 
        fullRes: [], 
    }, 
    {
        username: 'samantha', 
        imgs: await Astro.glob('../../../members/samantha/portfolio/*'), 
        fullRes: [], 
    }, 
]

members.forEach((m, i) => {
    m.imgs.forEach(img => {
        var img = img.default
        
        if (typeof img === 'object') {
            var obj = img
            obj.username = m.username

            var fullRes = members[i].fullRes.filter(r => r.name === getFNameNoExt(img.src))
            if (fullRes.length > 0) {
                obj.fullRes = fullRes[0].src
            }

            images.push(obj)
        }
    })
})

images.forEach((img, i) => {
    var username = img.username
    var member = members.filter(m => m.username === username)[0]
        
    var fullRes = member.fullRes.filter(r => r.name === getFNameNoExt(img.src))
    if (fullRes.length > 0) {
        img.fullRes = fullRes[0].src
    }

    images[i] = img
})

function getFName(str) {
    if (str.includes('/')) str = str.split('/').slice(-1)[0]
    return str
}

function getFNameNoExt(str) {
  if (str.includes('/')) str = str.split('/').slice(-1)[0]
  str = str.slice(0, -1*getFExt(str, 2).length)

  return str
}

function getFExt(str, level=1) {
    str = getFName(str)
    if (str.includes('.') && level > 0) {
        switch (level) {
            case 1: 
                str = str.split('.').slice(-1, -1).join('.')
                break
            default: 
                str = str.split('.').slice(-1*level, -1).join('.')
                break
        }
    }
    return str
}

function toProper(user) {
    user = `${user.slice(0, 1).toUpperCase()}${user.slice(1)}`
    return user
}

var dId = 'workCarousel'
---
<Carousel carouselIndex={carouselIndex} dataColumns={images.length} dataId={dId}>
    {
        images.map((img, i) => {
            return <LargeImage id={`${dId}-${i}`} src={img.src} alt={`${getFNameNoExt(img.src)} by ${toProper(img.username)}`} draggable={false} />
        })
    }
</Carousel>